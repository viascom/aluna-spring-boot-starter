plugins {
    id "idea"
    id "java-library"
    id "maven-publish"
    id "signing"
    id "org.jetbrains.kotlin.jvm" version "1.7.21"
    id "org.jetbrains.kotlin.kapt" version "1.7.21"
    id "org.springframework.boot" version "3.0.0"
    id "io.spring.dependency-management" version "1.1.0"
    id "de.undercouch.download" version "5.3.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
    major = 0
    minor = 0
    patch = 33

    isCiServer = System.getenv("GITHUB_ACTIONS") != null || System.getProperty("GITHUB_ACTIONS") != null

    jdaVersion = "5.0.0-beta.1"
    retrofitVersion = "2.9.0"
    jacksonSpringBootVersion = "3.0.0"
    jacksonVersion = "2.14.1"
    emojiJavaVersion = "5.1.1"
    gsonVersion = "2.10"
}

group "io.viascom.discord.bot"
version = "${major}.${minor}.${patch}_${jdaVersion}${isCiServer ? "" : "-SNAPSHOT"}"
project.logger.lifecycle("Version of this build: ${version}")

tasks.bootJar { enabled = false }
tasks.jar { enabled = true }

jar {
    baseName "aluna-spring-boot-starter"
    archiveClassifier.set("")

    manifest {
        attributes "Implementation-Version": "${project.version}"
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

springBoot {
    buildInfo()
}

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven {
        name "m2-dv8tion"
        url "https://m2.dv8tion.net/releases"
    }
}

dependencies {

    //====== Kotlin ======
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j"
    compileOnly "org.jetbrains.kotlin:kotlin-script-util"
    compileOnly "org.jetbrains.kotlin:kotlin-script-runtime"
    compileOnly "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable"

    //====== Spring ======
    compileOnly "org.springframework.boot:spring-boot-starter"
    compileOnly "org.springframework.boot:spring-boot-starter-actuator"

    //====== Configuration Processor ======
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    //====== JDA ======
    api "net.dv8tion:JDA:$jdaVersion"

    //====== Jackson ======
    implementation "org.springframework.boot:spring-boot-starter-json:$jacksonSpringBootVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    //====== Gson ======
    compileOnly "com.google.code.gson:gson:$gsonVersion"

    //====== Emoji Helper ======
    api("com.vdurmont:emoji-java:$emojiJavaVersion") {
        exclude group: "org.json", module: "json"
        //Because of https://advisory.checkmarx.net/advisory/vulnerability/Cx08fcacc9-cb99/
    }
    api "org.json:json:20220924"

    //====== Testing ======
    testImplementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-actuator"
    testImplementation "org.jetbrains.kotlin:kotlin-script-util"
    testImplementation "org.jetbrains.kotlin:kotlin-script-runtime"
    testImplementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    testImplementation "org.jetbrains.kotlin:kotlin-compiler-embeddable"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
        freeCompilerArgs = ["-Xjvm-default=all"]
    }
}

//Wait for files from processResources and bootBuildInfo
compileKotlin.inputs.files(processResources, bootBuildInfo)

processResources.dependsOn "kaptKotlin"
processResources {
    filesMatching(["banner.txt", "version.txt"]) {
        filter {
            it.replace("jda.version", "${jdaVersion}").replace("aluna.version", "${project.version}")
        }
    }

    //Add spring-configuration-metadata.json to resources
    from "build/tmp/kapt3/classes/main"

    //Add generatePomFileForMavenJavaPublication to resources
    into("META-INF/maven/$project.group/aluna-spring-boot-starter") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
}

task downloadBeautifyJsFile(type: Download) {
    src "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.5/beautify.min.js"
    dest "build/resources/main/js/lib/beautify.js"
    quiet true
    overwrite false
}

task verifyBeautifyJsFile(type: Verify, dependsOn: downloadBeautifyJsFile) {
    src new File("build/resources/main/js/lib/", "beautify.js")
    algorithm "SHA-512"
    checksum "1a8edca5b62f5354ad382c40c81789235a2e463dc936b02db346b8bb756aac62a14527f3b381b46a8ef3b57c8af60773e9cfe363df247882a097fc57a04b041d"
}
processResources.dependsOn verifyBeautifyJsFile

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            name = "OSSRH"
            url = isCiServer ? releaseRepo : snapshotRepo

            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                groupId = "io.viascom.discord.bot"
                name = "aluna-spring-boot-starter"
                description = "Spring Boot Starter for JDA Discord bots."
                url = "https://github.com/viascom/aluna-spring-boot-starter"
                packaging = "jar"

                licenses {
                    license {
                        name = 'Apache-2.0 license'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    url = "https://github.com/viascom/aluna-spring-boot-starter"
                    connection = "scm:git://github.com/viascom/aluna-spring-boot-starter.git"
                    developerConnection = "scm:git://github.com/viascom/aluna-spring-boot-starter.git"
                }

                developers {
                    developer {
                        id = "itsmefox"
                        name = "Patrick BÃ¶sch"
                        email = "patrick.boesch@viascom.email"
                        organizationUrl = "https://viascom.io/"
                    }
                    developer {
                        id = "botscripter"
                        name = "Nikola Stankovic"
                        email = "nikola.stankovic@viascom.email"
                        organizationUrl = "https://viascom.io/"
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { isCiServer }
}