plugins {
    id "idea"
    id "java-library"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.7.10"
    id "org.jetbrains.kotlin.kapt" version "1.7.10"
    id "org.springframework.boot" version "2.7.1"
    id "io.spring.dependency-management" version "1.0.12.RELEASE"
    id "de.undercouch.download" version "5.1.0"
}

group "io.viascom.discord.bot"
version "0.0.23_5.0.0-alpha.13"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.bootJar { enabled = false }
tasks.jar { enabled = true }

jar {
    baseName "aluna-spring-boot-starter"
    archiveClassifier.set("")

    manifest {
        attributes "Implementation-Version": "${project.version}"
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

springBoot {
    buildInfo()
}

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "m2-dv8tion"
        url "https://m2.dv8tion.net/releases"
    }
}

ext {
    jdaVersion = "5.0.0-alpha.13"
    retrofitVersion = "2.9.0"
    gsonVersion = "2.9.0"
    gsonJavatimeVersion = "1.1.1"
    jacksonSpringBootVersion = "2.7.1"
    jacksonVersion = "2.13.3"
    graalvmJsVersion = "22.1.0.1"
    jnanoidVersion = "2.0.0"
    nashornCoreVersion = "15.4"
    ddTraceVersion = "0.103.0"
    emojiJavaVersion = "5.1.1"
}


dependencies {

    //====== Kotlin ======
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    compileOnly "org.jetbrains.kotlin:kotlin-script-util"
    compileOnly "org.jetbrains.kotlin:kotlin-script-runtime"
    compileOnly "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    compileOnly "org.jetbrains.kotlin:kotlin-compiler-embeddable"

    //====== Spring ======
    compileOnly "org.springframework.boot:spring-boot-starter"
    compileOnly "org.springframework.boot:spring-boot-starter-actuator"

    //====== Configuration Processor ======
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    //====== JDA ======
    api "net.dv8tion:JDA:$jdaVersion"

    //====== Gson ======
    compileOnly "com.google.code.gson:gson:$gsonVersion"
    compileOnly "com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:$gsonJavatimeVersion"

    //====== Jackson ======
    implementation "org.springframework.boot:spring-boot-starter-json:$jacksonSpringBootVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    //====== Logging ======
    compileOnly "com.datadoghq:dd-trace-api:$ddTraceVersion"

    //====== NanoId ======
    api "com.aventrix.jnanoid:jnanoid:$jnanoidVersion"

    //====== Emoji Helper ======
    api("com.vdurmont:emoji-java:$emojiJavaVersion") {
        exclude group: "org.json", module: "json"
        //Because of https://advisory.checkmarx.net/advisory/vulnerability/Cx08fcacc9-cb99/
    }
    api 'org.json:json:20220320'

    //====== Testing ======
    testImplementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-actuator"
    testImplementation "org.jetbrains.kotlin:kotlin-script-util"
    testImplementation "org.jetbrains.kotlin:kotlin-script-runtime"
    testImplementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    testImplementation "org.jetbrains.kotlin:kotlin-compiler-embeddable"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

//Wait for files from processResources and bootBuildInfo
compileKotlin.inputs.files(processResources, bootBuildInfo)

processResources.dependsOn 'kaptKotlin'
processResources {
    filesMatching(['banner.txt', 'version.txt']) {
        filter {
            it.replace('jda.version', "${jdaVersion}").replace('aluna.version', "${project.version}")
        }
    }

    //Add spring-configuration-metadata.json to resources
    from "build/tmp/kapt3/classes/main"

    //Add generatePomFileForMavenJavaPublication to resources
    into("META-INF/maven/$project.group/aluna-spring-boot-starter") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
}

task downloadBeautifyJsFile(type: Download) {
    src "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.3/beautify.min.js"
    dest "build/resources/main/js/lib/beautify.js"
    quiet true
    overwrite false
}

task verifyBeautifyJsFile(type: Verify, dependsOn: downloadBeautifyJsFile) {
    src new File("build/resources/main/js/lib/", 'beautify.js')
    algorithm "SHA-512"
    checksum "d7a654bae33f39c79753b8bc53acd0aad0ec1be3c229c597f5796634dd33fa5a949413330e6233acab7a4ce996e3c100538ed7214e92a5a7a5cfcb4cf4b80629"
}
processResources.dependsOn verifyBeautifyJsFile

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/viascom/aluna-spring-boot-starter")
            credentials {
                username = findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                groupId = 'io.viascom.discord.bot'
                name = 'aluna-spring-boot-starter'
                description = 'Spring Boot Starter for JDA Discord bots.'
                url = 'https://github.com/viascom/aluna-spring-boot-starter'
                packaging = 'jar'

                scm {
                    url = 'https://github.com/viascom/aluna-spring-boot-starter'
                    connection = 'scm:git://github.com/viascom/aluna-spring-boot-starter.git'
                    developerConnection = 'scm:git://github.com/viascom/aluna-spring-boot-starter.git'
                }

                developers {
                    developer {
                        id = 'itsmefox'
                        name = 'Patrick BÃ¶sch'
                        email = 'patrick.boesch@viascom.email'
                        organizationUrl = 'https://viascom.io/'
                    }
                    developer {
                        id = 'botscripter'
                        name = 'Nikola Stankovic'
                        email = 'nikola.stankovic@viascom.email'
                        organizationUrl = 'https://viascom.io/'
                    }
                }
            }
        }
    }
}
